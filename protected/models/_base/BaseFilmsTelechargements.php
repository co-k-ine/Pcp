<?php

/**
 * This is the model base class for the table "Films_Telechargements".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "FilmsTelechargements".
 *
 * Columns in table "Films_Telechargements" available as properties of the model,
 * followed by relations of table "Films_Telechargements" available as properties of the model.
 *
 * @property integer $idFilms_Telechargements
 * @property integer $Films_idFilms
 * @property string $liens
 * @property string $NFO
 * @property string $release_name
 * @property string $mot_de_passe
 * @property integer $tbl_user_id
 * @property string $tbl_user_name
 *
 * @property Decoupages[] $decoupages
 * @property Films $filmsIdFilms
 * @property Hebergeures[] $hebergeures
 * @property Langues[] $langues
 * @property Qualiter[] $qualiters
 * @property SousTitre[] $sousTitres
 */
abstract class BaseFilmsTelechargements extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'Films_Telechargements';
	}

	public static function representingColumn() {
		return 'liens';
	}

	public function rules() {
		return array(
			array('Films_idFilms, liens', 'required'),
			array('Films_idFilms, tbl_user_id', 'numerical', 'integerOnly'=>true),
			array('release_name, mot_de_passe, tbl_user_name', 'length', 'max'=>150),
			array('NFO', 'safe'),
			array('NFO, release_name, mot_de_passe, tbl_user_id, tbl_user_name', 'default', 'setOnEmpty' => true, 'value' => null),
			array('idFilms_Telechargements, Films_idFilms, liens, NFO, release_name, mot_de_passe, tbl_user_id, tbl_user_name', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'decoupages' => array(self::MANY_MANY, 'Decoupages', 'Decoupages_has_Films_Telechargements(Films_Telechargements_idFilms_Telechargements, Decoupages_idDecoupages)'),
			'filmsIdFilms' => array(self::BELONGS_TO, 'Films', 'Films_idFilms'),
			'hebergeures' => array(self::MANY_MANY, 'Hebergeures', 'Hebergeures_has_Films_Telechargements(Films_Telechargements_idFilms_Telechargements, Hebergeures_idHebergeures)'),
			'langues' => array(self::MANY_MANY, 'Langues', 'Langues_has_Films_Telechargements(Films_Telechargements_idFilms_Telechargements, Langues_idLangues)'),
			'qualiters' => array(self::MANY_MANY, 'Qualiter', 'Qualiter_has_Films_Telechargements(Films_Telechargements_idFilms_Telechargements, Qualiter_idQualiter)'),
			'sousTitres' => array(self::MANY_MANY, 'SousTitre', 'sous_titre_has_Films_Telechargements(Films_Telechargements_idFilms_Telechargements, sous_titre_idsous_titre)'),
		);
	}

	public function pivotModels() {
		return array(
			'decoupages' => 'DecoupagesHasFilmsTelechargements',
			'hebergeures' => 'HebergeuresHasFilmsTelechargements',
			'langues' => 'LanguesHasFilmsTelechargements',
			'qualiters' => 'QualiterHasFilmsTelechargements',
			'sousTitres' => 'SousTitreHasFilmsTelechargements',
		);
	}

	public function attributeLabels() {
		return array(
			'idFilms_Telechargements' => Yii::t('app', 'Id Films Telechargements'),
			'Films_idFilms' => Yii::t('app', 'Films Id Films'),
			'liens' => Yii::t('app', 'Liens'),
			'NFO' => Yii::t('app', 'Nfo'),
			'release_name' => Yii::t('app', 'Release Name'),
			'mot_de_passe' => Yii::t('app', 'Mot De Passe'),
			'tbl_user_id' => Yii::t('app', 'Tbl User'),
			'tbl_user_name' => Yii::t('app', 'Tbl User Name'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('idFilms_Telechargements', $this->idFilms_Telechargements);
		$criteria->compare('Films_idFilms', $this->Films_idFilms);
		$criteria->compare('liens', $this->liens, true);
		$criteria->compare('NFO', $this->NFO, true);
		$criteria->compare('release_name', $this->release_name, true);
		$criteria->compare('mot_de_passe', $this->mot_de_passe, true);
		$criteria->compare('tbl_user_id', $this->tbl_user_id);
		$criteria->compare('tbl_user_name', $this->tbl_user_name, true);

		return new CActiveDataProvider(get_class($this), array(
			'criteria' => $criteria,
		));
	}
}